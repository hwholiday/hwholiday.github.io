<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Auth on hwholiday</title><link>http://hwholiday.github.io/categories/auth/</link><description>Recent content in Auth on hwholiday</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 17 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://hwholiday.github.io/categories/auth/index.xml" rel="self" type="application/rss+xml"/><item><title>OAuth 2.0-授权码模式（authorization code）仿微信设计（战术篇）</title><link>http://hwholiday.github.io/2022/auth2_tactics/</link><pubDate>Mon, 17 Jan 2022 00:00:00 +0000</pubDate><guid>http://hwholiday.github.io/2022/auth2_tactics/</guid><description>归档 OAuth 2.0-授权码模式（authorization code）仿微信设计（战略篇） OAuth 2.0-授权码模式（authorization code）仿微信设计（战术篇） (DDD 领域驱动设计实现代码 Golang ) DDD（领域设计驱动）+ 六边形架构 APPID 必须是10位 因为使用了 ase126 来作为 OpenId的生成 （key=APPID(10)+SALT(6) 16 = 126） 代码地址 完整示例可直接运行 请点击 代码结构参考 请点击 如有任何疑问 请点击联系 . ├── adpter │ ├── adpter.go │ └── http │ ├── auth_handles │ │ ├── auth_code_handles.go │ │ ├── auth_token_handles.go │ │ └── handers.go │ ├── http.go │ └── routers │ ├── middleware.go │ └── routers.go ├── cmd │ ├── app.</description></item><item><title>OAuth 2.0-授权码模式（authorization code）仿微信设计（战略篇）</title><link>http://hwholiday.github.io/2022/auth2_strategy/</link><pubDate>Sun, 16 Jan 2022 00:00:00 +0000</pubDate><guid>http://hwholiday.github.io/2022/auth2_strategy/</guid><description>归档 OAuth 2.0-授权码模式（authorization code）仿微信设计（战略篇） OAuth 2.0-授权码模式（authorization code）仿微信设计（战术篇） (DDD 领域驱动设计实现代码 Golang ) 在听到 OAuth 2.0 这个名词时可能很多人只知道这个是用来授权的协议，具体是怎么实现的，以及解决了什么问题，可能大家还不是很了解，下面我给大家一个场景来体会下 假设我们有个 APP 来统计用户 github 的使用情况 要从 Github 获取数据，用户必须同意把自己的 Github 信息给 APP，APP 才能得到 Github 的数据进行统计数据 一般来说只有把用户名密码或者用户在 Github 的 Token ,Session 给 APP ，APP才能通过 Github 获取数据，但是当前的操作可能存在以下问题 Token , Session 这两兄弟的有效期不长，可能刚给了APP ，一会就又失效了 给了用户名密码 APP 会把用户名密码都存在自己的服务器上，要是被破解或者拖库会造成密码泄露用这个密码进行保护的资源全部有泄露的风险 APP 获取了用户在 Github 的全部权限，用户没办法限制授权的范围和时间 想要回收在这个 APP 的权限，用户必须改密码，这样的话其他 APP 也不行使用了，造成很大的麻烦 什么是 OAuth 2.0 在了解上面的例子后大家也应该清楚为什么会出现 OAuth 2.0 ，以及 OAuth 2.0 的作用 使用方=&amp;ldquo;APP&amp;rdquo; | 提供方 = &amp;ldquo;Github&amp;rdquo; | 授权层 =&amp;ldquo;OAuth 2.</description></item></channel></rss>