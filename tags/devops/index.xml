<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DevOps on hwholiday</title>
    <link>http://hwholiday.github.io/tags/devops/</link>
    <description>Recent content in DevOps on hwholiday</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 Mar 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://hwholiday.github.io/tags/devops/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GitLab CI 实现 Golang 自动构建为 Docker 镜像 </title>
      <link>http://hwholiday.github.io/2020/gitlab_ci_docker/</link>
      <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://hwholiday.github.io/2020/gitlab_ci_docker/</guid>
      <description>实现目标 提交代码自动构建,自动打包为docker镜像 前期准备 Makefile 学习并使用 MakeFile .gitlab-ci.yml .gitlab-ci.yml介绍 安装 gitlab_runner (docker) 下载地址 docker pull gitlab/gitlab-runner #/run/docker.sock 容器中可以执行宿主机的Docker命令 docker run -d --name gitlab-runner --restart always -v /srv/runner/config:/etc/gitlab-runner -v /run/docker.sock:/var/run/docker.sock gitlab/gitlab-runner 工程目录 目录 ├── buildDockerImage.sh ├── Dockerfile ├── main.go ├── Makefile .gitlab-ci.yml 内容 # 所有任务基于这个镜像 image: golang:1.14.0 # 在每个任务执行前运行 before_script: - export VERSION=`echo ${CI_COMMIT_TAG} | awk -F&amp;#34;_&amp;#34; &amp;#39;{print $1}&amp;#39;` # 安装 docker，由于需要在容器里面使用宿主的docker命令，这里就需要安装一个docker的可执行文件，然后在启动容器的时候，将宿主的 docker.sock 文件挂载到容器内的同样位置。 - curl -O https://get.docker.com/builds/Linux/x86_64/docker-latest.tgz &amp;amp;&amp;amp; tar zxvf docker-latest.tgz &amp;amp;&amp;amp; cp docker/docker /usr/local/bin/ &amp;amp;&amp;amp; rm -rf docker docker-latest.</description>
    </item>
    
    <item>
      <title>GitLab CI 实现 Golang 自动构建</title>
      <link>http://hwholiday.github.io/2020/gitlab_ci/</link>
      <pubDate>Fri, 27 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://hwholiday.github.io/2020/gitlab_ci/</guid>
      <description>实现目标 提交代码自动构建,并把文件放到指定目录 （也可以上传到运维服务器，这里看自己选择） 前期准备 Makefile 学习并使用 MakeFile .gitlab-ci.yml .gitlab-ci.yml介绍 安装 gitlab_runner (二进制安装) 下载地址 sudo chmod +x gitlab-runner sudo ./gitlab-runner install --user=当前用户 --working-directory=/home/当前用户/gitlabRunner sudo ./gitlab-runner start 工程目录 目录 ├── .gitlab-ci.yml ├── main.go └── Makefile .gitlab-ci.yml 内容 # 在每个任务执行前运行 before_script: - export VERSION=`echo ${CI_COMMIT_TAG} | awk -F&amp;#34;_&amp;#34; &amp;#39;{print $1}&amp;#39;` stages: - test - build # 定义 job test: stage: test tags: - test script: - echo &amp;#34;我是 tast 任务&amp;#34; - echo &amp;#34;git 提交的 tag&amp;#34; - echo ${CI_COMMIT_TAG} - echo ${CI_PROJECT_NAME} - echo ${VERSION} - echo $GOPATH only: - tags # 定义 job build: stage: build tags: - test script: - echo &amp;#34;开始构建程序&amp;#34; - make pack ENV=&amp;#34;prod&amp;#34; VERSION=${VERSION} - pwd - if [ !</description>
    </item>
    
    <item>
      <title>学习并使用 MakeFile</title>
      <link>http://hwholiday.github.io/2020/makefile/</link>
      <pubDate>Thu, 26 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://hwholiday.github.io/2020/makefile/</guid>
      <description>什么是MakeFile Makefile文件的作用是告诉make工具需要如何去编译和链接程序，在需要编译工程时只需要一个make命令即可，避免了每次编译都要重新输入完整命令的麻烦，大大提高了效率，也减少了出错率。
目录 ├── main.go ├── Makefile └── README.md Makefile 例子 #环境变量 export VERSION=1.0.0 export ENV=prod export PROJECT=test #变量 PWD=$(shell pwd) OUT_DIR=$(PWD)/cmd OUT_NAME=$(PROJECT)_$(VERSION) OUT_FILE=$(OUT_DIR)/$(OUT_NAME) MAIN_FILE=main.go PACK_FILE=$(OUT_NAME).tar.gz build: @echo &amp;#34;移除老项目&amp;#34; @ rm -rf $(OUT_DIR)/* @go build -o $(OUT_FILE) $(MAIN_FILE) @echo &amp;#34;构建项目成功 : &amp;#34; $(OUT_NAME) run:build @# 执行pack前先执行一次build @echo &amp;#34;运行项目&amp;#34; @$(OUT_FILE) pack:build @# 执行pack前先执行一次build tar -czvf $(PACK_FILE) -C $(OUT_DIR) . @echo &amp;#34;打包结束 :&amp;#34; 构建命令 # 带上环境变量 make build ENV=&amp;#34;prod&amp;#34; VERSION=&amp;#34;2.0.0&amp;#34; PROJECT=&amp;#34;test_makefile&amp;#34; 打包命令 make pack 运行命令 make run </description>
    </item>
    
    <item>
      <title>docker安装gitlab</title>
      <link>http://hwholiday.github.io/2017/docker_install_gitlab/</link>
      <pubDate>Sat, 02 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>http://hwholiday.github.io/2017/docker_install_gitlab/</guid>
      <description>Gitlab简介 GitLab是由GitLab Inc.开发，使用MIT许可证的基于网络的Git仓库管理工具，且具有wiki和issue跟踪功能。 GitLab是一个Git的代码托管工具，有免费的社区版允许我们在本地搭建代码托管网站，也有付费的企业版网站，能够在线托管代码。 搜索 gitlab Docker镜像 sudo docker search gitlab //输出结果部分截图 NAME DESCRIPTION STARS OFFICIAL AUTOMATED gitlab/gitlab-ce GitLab Community Edition docker image based … 2165 [OK] sameersbn/gitlab Dockerized gitlab web server 1067 [OK] gitlab/gitlab-runner GitLab CI Multi Runner used to fetch and run… 409 [OK] twang2218/gitlab-ce-zh 汉化的 GitLab 社区版 Docker Image 149 [OK] gitlab/gitlab-ee GitLab Enterprise Edition docker image based… 115 jangrewe/gitlab-ci-android GitLab CI image for building Android apps 46 [OK] centurylink/gitlab This image uses the image from sameersbn / g… 26 [OK] gitlab/dind 24 [OK] 拉取 gitlab Docker镜像 sudo docker pull gitlab/gitlab-ce 启动Gitlab 启动一个默认配置的Gitlab。在本机测试使用的话，将-h替换为127.</description>
    </item>
    
  </channel>
</rss>
